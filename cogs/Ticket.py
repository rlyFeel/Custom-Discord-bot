import nextcord

from nextcord.ext import commands
from cfg.cfg import *
from cfg.dtb import *
from pyqiwip2p import QiwiP2P

p2p = QiwiP2P(auth_key=QIWI_TOKEN)

class addhwid(nextcord.ui.Modal):
    def __init__(self, channel):
        super().__init__(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏",
            timeout=None
        )
        self.channel = channel

        self.user = nextcord.ui.TextInput(
            label="WHID",
            min_length=32,
            max_length=32,
            required=True,
            placeholder='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à HWID'
        )
        self.add_item(self.user)
        print(self.user)

    async def callback(self, interaction: nextcord.Interaction) -> None:
        whid = str(self.user.value)
        match await add_hwid(interaction.user.id, whid, interaction.user.name):
            case 0:
                emb = nextcord.Embed(title="–í–∞—à —Ö–≤–∏–¥ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω!",
                                    description=f'–í–æ—Ç –≤–∞—à —á–∏—Ç.\n',
                                    color=nextcord.Color.dark_blue())
                await interaction.send(embed=emb, ephemeral=False)
            case 1:
                emb = nextcord.Embed(title="–í–∞—à —Ö–≤–∏–¥ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω!",
                                    description=f'–í–æ—Ç –≤–∞—à —á–∏—Ç.\n',
                                    color=nextcord.Color.dark_blue())
                await interaction.send(embed=emb, ephemeral=False)

class WhidGetter(nextcord.ui.View):
    def __init__(self):
        super().__init__(
            timeout=None
        )
    @nextcord.ui.button(
        label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å WHID", style=nextcord.ButtonStyle.primary
    )

    async def whidgetter(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_modal(addhwid(interaction.channel))


class CreateTicket(nextcord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @nextcord.ui.button(
        label='üî® –ü–æ–º–æ—â—å', style=nextcord.ButtonStyle.blurple
    )
    async def create_ticket_help(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        msg = await interaction.response.send_message("a ticket be create", ephemeral=True)
        channel = await interaction.guild.create_text_channel(f'üî®‚îÉ{interaction.user.name}-–ü–æ–º–æ—â—å',
                                                              category=nextcord.utils.get(
                                                                  interaction.guild.categories,
                                                                  id=1037406108526051398))
        await channel.set_permissions(interaction.user,
                                      send_messages=True,
                                      read_message_history=True,
                                      read_messages=True)
        await channel.set_permissions(interaction.guild.get_role(interaction.guild.id),
                                      send_messages=False,
                                      read_messages=False)

        await msg.edit(f"–¢–∏–∫–µ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω! {channel.mention}")
        emb = nextcord.Embed(title=f'–ü–æ–º–æ—â—å ! - {interaction.user.name}',
                                description='–¢—É—Ç –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏')
        await channel.send(embed=emb, view=TicketSettings())

    @nextcord.ui.button(
        label='üí∏ –ü–æ–∫—É–ø–∫–∞', style=nextcord.ButtonStyle.blurple
    )
    async def create_ticket_buy(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        msg = await interaction.response.send_message("a ticket be create", ephemeral=True)
        channel = await interaction.guild.create_text_channel(f'üí∏‚îÉ{interaction.user.name}-–ü–æ–∫—É–ø–∫–∞',
                                                              category=nextcord.utils.get(
                                                                  interaction.guild.categories,
                                                                  id=))
        await channel.set_permissions(interaction.user,
                                      send_messages=True,
                                      read_message_history=True,
                                      read_messages=True)
        await channel.set_permissions(interaction.guild.get_role(interaction.guild.id),
                                      send_messages=False,
                                      read_messages=False)

        await msg.edit(f"–¢–∏–∫–µ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω! {channel.mention}")
        emb_buy = nextcord.Embed(title=f'–ü–æ–∫—É–ø–∫–∞ ! - {interaction.user.name}',
                                 description='–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è \n '
                                             '1.–ù–∞–∂–º–∏—Ç–µ –Ω–∞ "–ü–æ–ª—É—á–∏—Ç—å —Å—á—ë—Ç",—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—á—ë—Ç \n'
                                             '2.–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"\n'
                                             '3.–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã —Å–ª–µ–¥—É–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º')
        await channel.send(embed=emb_buy, view=TicketBuy())


class TicketSettings(nextcord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @nextcord.ui.button(
        label='–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç', style=nextcord.ButtonStyle.red, emoji='üìï'
    )
    async def close_button(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_message("–¢–∏–∫–µ—Ç —Å–∫–æ—Ä–æ –∑–∞–∫—Ä–æ–µ—Ç—Å—è...", ephemeral=True)
        await interaction.channel.delete()

    @nextcord.ui.button(
        label='–ü–æ–∑–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é', style=nextcord.ButtonStyle.blurple, emoji='üí°'
    )
    async def sing_to_help(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        emb = nextcord.Embed(description=f"üîî {interaction.user.mention} –ø–æ–∑–≤–∞–ª –Ω–∞ –ø–æ–º–æ—â—å.",color=nextcord.Color.red())
        await interaction.channel.send(f'<@&{Id_Staff_Role}>', embed=emb)


class TicketBuy(nextcord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @nextcord.ui.button(
        label='–ü–æ–∑–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é', style=nextcord.ButtonStyle.blurple, emoji='üí°'
    )
    async def sing_to_help(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        emb = nextcord.Embed(description=f"üîî {interaction.user.mention} –ø–æ–∑–≤–∞–ª –Ω–∞ –ø–æ–º–æ—â—å.",color=nextcord.Color.red())
        await interaction.response.send_message(f'<@&{Id_Staff_Role}>', embed=emb, ephemeral=False)

    @nextcord.ui.button(
        label='–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç', style=nextcord.ButtonStyle.red, emoji='üìï'
    )
    async def close_button(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_message("–¢–∏–∫–µ—Ç —Å–∫–æ—Ä–æ –∑–∞–∫—Ä–æ–µ—Ç—Å—è...", ephemeral=True)
        await interaction.channel.delete()

    @nextcord.ui.button(
        label='–ü–æ–ª—É—á–∏—Ç—å —Å—á—ë—Ç', style=nextcord.ButtonStyle.green, emoji='üíµ'
    )
    async def get_check(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        p2p.bill(amount=400, lifetime=60,
                 bill_id=int(str(interaction.user.id) + interaction.channel.mention.replace("<#", "").replace(">", "")),
                 comment=('MoonLight | Client version Beta | Your ds =  ' + interaction.user.name))
        await interaction.response.send_message(p2p.check(bill_id=int(
            str(interaction.user.id) + interaction.channel.mention.replace("<#", "").replace(">", ""))).pay_url)
    @nextcord.ui.button(
        label='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', style=nextcord.ButtonStyle.gray, emoji='üí¨'
    )
    async def check_check(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        global bot
        p2p.bill(amount=400, lifetime=60,
                 bill_id=int(str(interaction.user.id) + interaction.channel.mention.replace("<#", "").replace(">", "")),
                 comment=('MoonLight | Client version Beta | Your ds =  ' + interaction.user.name))
        if (p2p.check(bill_id=int(str(interaction.user.id) + str(interaction.channel.id))).status == "WAITING"):
            await interaction.send('–ù–µ –æ–ø–ª–∞—á–µ–Ω–Ω–æ!')
        elif p2p.check(bill_id=int(str(interaction.user.id) + str(interaction.channel.id))).status == "PAID":
            emb = nextcord.Embed(
                description='**–û–ø–ª–∞—á–µ–Ω–Ω–æ !** \n\n  - ```—Å–∫–∞—á–∞–π—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª,–Ω–∞–∂–º–∏—Ç–µ "Copy" , –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–≤–∏–¥ –≤ –º–µ–Ω—é ``` ',
                color=nextcord.Color.dark_blue())
            await interaction.send(embed=emb, view=WhidGetter())


class Ticekt(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        print('Cogs is loaded - ticket')

    @commands.command()
    @commands.has_permissions(administrator=True)
    async def ticket1(self, interaction):
        print('–∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç')
        emb = nextcord.Embed(title='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —Ç–∏–∫–µ—Ç–æ–≤! | MoonLight client', description='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ä–∞–∑–¥–µ–ª', color=nextcord.Color.teal())
        emb.set_image(url='')
        view=CreateTicket()
        await interaction.send(embed=emb, view=view)













async def setup(bot):
    bot.add_cog(Ticekt(bot))